# -*- coding: utf-8 -*-
"""Decision_Trees_Practical_6_April.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fU3Y-BDoJVfHCPWKD95XK7Qdv5v6DQj0
"""

from google.colab import files
uploaded = files.upload()

"""### **1. Import the required packages**"""

import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score

"""### **2. Reading and Exploring the Data**"""

heart = pd.read_csv('heart.csv')

heart.head()

heart.shape

heart.dtypes

heart.isnull().sum()  #print the total number of missing values column-wise

heart.duplicated().sum()  #print the number of duplicate rows present in our data

heart[heart.duplicated()]  #print all the duplicate rows

heart.drop_duplicates(inplace = True)

"""#### **Checking for the presence of outliers**"""

heart.describe()

def remove_outlier(data, columns):
  for column in columns:
    if column in data.columns:
      Q1 = data[column].quantile(0.25)
      Q3 = data[column].quantile(0.75)
      IQR = Q3 - Q1
      lower_bound = Q1 - 1.5 * IQR
      upper_bound = Q3 + 1.5 * IQR
      data = data[(data[column] >= lower_bound) & (data[column] <= upper_bound)]
  return data

clean_df = remove_outlier(heart, heart.columns.to_list())

(302 - 228) / 302

"""### **Machine Learning Process**"""

X = heart.drop(columns = 'target')  #store all the input columns
y = heart['target']  #store the output column

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 300)

"""### **Apply Decision Tree Classifier on the Data**"""

dec_tree = DecisionTreeClassifier(criterion='entropy', max_depth = 7)
dec_tree.fit(X_train, y_train)

from sklearn import tree

fig = plt.figure(figsize = (15,7))

#code to print the tree
fig = tree.plot_tree(dec_tree, feature_names = X.columns, filled = True)

dec_tree.get_depth()

y_pred = dec_tree.predict(X_test)

accuracy_score(y_test, y_pred)

"""#### **Check for overfitting in the data**"""

y_pred_train = dec_tree.predict(X_train)

accuracy_score(y_train, y_pred_train)

